require(knitr)
1:10
history()
aa=history()
getAnywhere(utils::history)
?.Last
.Last
getAnywhere(.Last)
.Last=function() save(1:10,"testLast.rdata")
runlast
runLast
myf = function() print(readline())
myf()
myf = function() return(cat(readline(),"\n")
)
myf()
ww=myf()
ww
aa=get(paste("q","norm",sep=""))
class(aa)
aa(2)
aa(0.1)
grep("[a]","apple")
grep("[au]","apple")
grep("[(a)u]","apple")
grep("[(au)]","apple")
grep("['au']","apple")
grep("[au]{1}-3","apple")
grep("[au]{1}-3","a-3")
grep("[au]{1}-3","a-4")
grep("[au]{1}-[0-5]","a-4")
myf=function(a,b) a+b
formals(myf)
myf=function(a=2,b) a+b
formals(myf)
c(formals(myf))
unlist(formals(myf))
c(body(myf))
mydf = function() readlines("whazzup")
ll=mydf()
mydf = function() readLines("whazzup")
ll=mydf()
mydf = function() readline("whazzup")
ll=mydf()
ll
mydf = function() readline("whazzup!!! ")
ll
ll=mydf()
ll
formals(read.delim)
.rmd
install.packages("knitr")
?image
install.packages("compiler", dependencies=TRUE)
install.packages(lme4)
install.packages("lme4")
system("pdfcrop")
table2pdf()
apropos("path")
search()
Sys.getenv("R_USER")
?Sys.getenv
Sys.getenv()
sys.getEnvSys.setenv(PATH=paste(Sys.getenv("PATH"),"/usr/local/texlive/2011",sep=":"))
sys.getenv("PATH")
Sys.getenv("PATH")
Sys.setenv(PATH=paste(Sys.getenv("PATH"),"/usr/local/texlive/2011",sep=":"))
Sys.getenv("PATH")
system("pdfcrop")
head(Sys.getenv())
class(Sys.getenv())
grep("/bin/sh",Sys.getenv())
grep("vi",Sys.getenv())
grep("sh",Sys.getenv())
grep("sh",Sys.getenv(),value=TRUE)
?list.files
str="08_All_gearxspecies.r"
gsub("^[0-9]{1,3}","hello",str)
str="8_All_gearxspecies.r"
gsub("^[0-9]{1,3}","hello",str)
str="08a_All_gearxspecies.r"
gsub("^[0-9]{1,3}","hello",str)
gsub("^[0-9]{1,3}[a-z]?","hello",str)
str=c(str,"1_bouhou_zoup.r")
gsub("^[0-9]{1,3}[a-z]?","hello",str)
gsub("^[0-9]{1,3}[a-z]?",c("bnjour","hello"),str)
seq(3)
?ncar
?nchar
paste(1:15,"a",sep="")
nchar(paste(1:15,"a",sep=""))
aa=paste(1:15,"a",sep="")
aa[nchar(aa)<3]
aa[nchar(aa)<3] = paste("0",aa[nchar(aa)<3])
aa
?file.rename
?grep
grep("a","apple",value=TRUE)
grep("a","apple",value=TRUE,fixed=TRUE)
grepexpr("a","apple",value=TRUE,fixed=TRUE)
gregexpr("a","apple",value=TRUE,fixed=TRUE)
gregexpr("a","apple")
regmatches(gregexpr("a","apple"))
regmatches("a","apple")
gsub("_\\w+","","apple_lala")
gsub("_\\w+","","apple_lala.r")
gsub("_+","","apple_lala.r")
gsub("_\\w+..","","apple_lala.r")
gsub("_\\w+.r","","apple_lala.r")
c("1","2","2a","10")
order(c("1","2","2a","10"))
sort(c("1","2","2a","10"))
ll(c("1","2","2a","10"))
ll=(c("1","2","2a","10"))
gsub("[a-z]","",ll)
order(gsub("[a-z]","",ll))
order(as.numeric(gsub("[a-z]","",ll)))
hop="22a_ALB_lalala"
gsub("^..\w","banana",hop)
gsub("^..\\w","banana",hop)
gsub("\\w","banana",hop)
gsub("[a-z]{1}","banana",hop)
?gsub
gsub("a{1}","banana",hop)
gsub("\\d{2}a_","22banana",hop)
str_extract("22a_lala_""[a-z]|[A-Z]|[0-9]")
str_extract("22a_lala_","[a-z]|[A-Z]|[0-9]")
require(stringr)
str_extract("22a_lala_","[a-z]|[A-Z]|[0-9]")
str_extract("22a_lala_","^.._[a-z]|[A-Z]|[0-9]")
str_extract_all("22a_lala_","^.._[a-z]|[A-Z]|[0-9]")
str_extract_all("22a_lala_","^.._[a-z]|[A-Z]|[0-9]",perl=TRUE)
str_extract_all("22a_lala_","^.._([a-z]|[A-Z]|[0-9])")
str_extract_all("22a_lala_","^..a_([a-z]|[A-Z]|[0-9])")
str_extract_all("22a_lala_","^..a_([a-z]|[A-Z]|[0-9])*")
str_extract_all("22a_lala_hop","^..a_([a-z]|[A-Z]|[0-9])*")
str_extract_all("07_BZ_FJ_LL","^..a_([a-z]|[A-Z]|[0-9])*")
str_extract_all("07a_BZ_FJ_LL","^..a_([a-z]|[A-Z]|[0-9])*")
str_extract_all("39_LLx5YR_FJ_...","^.._([a-z]|[A-Z]|[0-9])*")
?list.files
?file.remove
pomme=list("lala"=1:10)
pomme
pomme[["woup"]]
is.null(pomme[["woup"]])
capitalize("pomme")
?capitalize
gsub("a","A","pomme")
?rdnorm
apropos(norm)
apropos("norm")
?dnorm
?Distributions
?write.csv
plot(1:10)
test=c("k","lala.k","lala.block")
grep("k",test)
grep("k",test,value=TRUE)
grep("//.k",test,value=TRUE)
grep(".//.k",test,value=TRUE)
grep(".k^",test,value=TRUE)
grep(".k$",test,value=TRUE)
grep("\\.k$",test,value=TRUE)
grep(("\\.k$"|"k{1}"),test,value=TRUE)
grep(("\\.k$|k{1}"),test,value=TRUE)
grep(("\\.k$|^k$"),test,value=TRUE)
?gam.check
apropos("ENV")
?Sys.getenv
?install.packages
Sys.getenv("HTTP_PROXY")
q()
system("R")
system("R,--no-save')
")"
;0
;
""
system("R,--no-save")
system("R --no-save")
?gc
object.size(ls())
sapply(ls(),object.size)
sum(sapply(ls(),object.size))
gc()
object.size(matrix(runif(100000000)))
gc()
hip=matrix(runif(100000000))
gc()
765.3-2.3
print(object.size(hip),"Mb")
print(object.size(hip),unit="Mb")
rm(hip)
gc()
memory.limit()
memory.size()
?memory.size
.Last
getAnywhere(.Last)
a 2-dimensional example#
x <- rbind(matrix(rnorm(100, sd = 0.3), ncol = 2),#
           matrix(rnorm(100, mean = 1, sd = 0.3), ncol = 2))
dotchart(x,ldata=NA)
dotchart(x,lcolor=NA)
colnames(x) <- c("x", "y")#
(cl <- kmeans(x, 2))#
plot(x, col = cl$cluster)
install.packages("geoR")
install.packages("reshape2")
install.packages("gamlss")
require(gamlass)
require(gamlss)
version()
version
install.packages("arm")
read.csv(file.choose())
def.filtre.especes <<- function(aF="tous") {#
#
    if(aF == "tous") {#
       taxoF.incl <<- "inclure"#
       taxoF.utaxo <<- "Groupe"#
       taxoF.nom <<- "Tous"#
     } else {#
       print("Definition des filtres taxonomiques:")#
    cat("Inclure ou exclure? ")#
    taxoF.incl <<- tolower(readLines(file("stdin"),1))#
    cat("Unité taxomique? (Groupe/Sous-Groupe/Famille/Genre/Espece) ")#
    taxoF.utaxo <<- capitalize(tolower(readLines(file("stdin"),1)))#
       if(taxoF.utaxo == "Groupe") taxoF.utaxo <<- "Groupe"#
       if(taxoF.utaxo == "Sous-Groupe") taxoF.utaxo <<- "S_Groupe"#
       if(taxoF.utaxo == "Espece") taxoF.utaxo <<- "G_Sp"#
    cat("Nom? ")#
    taxoF.nom <<- readLines(file("stdin"),1) }#
    taxoF.nom <<- capitalize(tolower(trim(unlist(strsplit(taxoF.nom,",")))))#
    closeAllConnections()#
  }
def.filtre.especes(3)
import.filtre.taxo() <<- function(action="inclure",niveau="Famille",titre=TRUE) {#
#
      lnoms <- read.csv(file.choose(),header=titre) # sélectionner le fichier dans l'ordi#
      if(class(lnoms)=="data.frame") lnoms <- lnoms[,1]#
      lnoms <- capitalize(tolower(trim(lnoms))) # nettoyer format des noms#
      taxoF.incl <<- action#
      taxoF.utaxo <<- niveau#
      taxoF.nom <<- lnoms#
#
      voir.filtre.taxo()#
  }
import.filtre.taxo <<- function(action="inclure",niveau="Famille",titre=TRUE) {#
#
      lnoms <- read.csv(file.choose(),header=titre) # sélectionner le fichier dans l'ordi#
      if(class(lnoms)=="data.frame") lnoms <- lnoms[,1]#
      lnoms <- capitalize(tolower(trim(lnoms))) # nettoyer format des noms#
      taxoF.incl <<- action#
      taxoF.utaxo <<- niveau#
      taxoF.nom <<- lnoms#
#
      voir.filtre.taxo()#
  }
import.filtre.taxo()
trim <<- function(x) gsub("^\\s+","",gsub("\\s+$","",x))
import.filtre.taxo()
taxoF.incl
taxoF.utaxo
taxoF.nom
w = readline()
w
def.filtre.especes <<- function(aF="tous") {#
#
    if(aF == "tous") {#
       taxoF.incl <<- "inclure"#
       taxoF.utaxo <<- "Groupe"#
       taxoF.nom <<- "Tous"#
     } else {#
       message("Definition des filtres taxonomiques:")#
    taxoF.incl <<- tolower(readline("Inclure ou exclure? "))#
    mm <- "Unité taxomique? (Groupe/Sous-Groupe/Famille/Genre/Espece) "#
    taxoF.utaxo <<- capitalize(tolower(readline(mm)))#
       if(taxoF.utaxo == "Sous-Groupe") taxoF.utaxo <<- "S_Groupe"#
       if(taxoF.utaxo == "Espece") taxoF.utaxo <<- "G_Sp"#
    taxoF.nom <<- readline("Nom? ")#
    taxoF.nom <<- capitalize(tolower(trim(unlist(strsplit(taxoF.nom,",")))))#
  }
}
def.filtre.especes('oui')
taxoF.nom
R.Version()
installed.packages
installed.packages()
names(installed.packages())
dimnames(installed.packages())
require(PBSmapping)
library()
install.packages("sspline")
.Library()
apropos("library")
.Library.site
.Library
require(sspline)
require(splines)
dara(rmp)
data(rmp)
?data
getwd()
setwd("Projects/misc-ressources/quick-world-map")
data(rmp)
hop=read.table("rmp.txt")
head(hop)
